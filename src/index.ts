import axios, { AxiosProgressEvent } from 'axios';
import path from "path";
import { app, BrowserWindow,ipcMain,dialog} from 'electron';
import { createWriteStream } from 'node:original-fs';
import isDev from "electron-is-dev"
import {autoUpdater,AppUpdater} from "electron-updater"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

autoUpdater.autoDownload=false;
autoUpdater.autoInstallOnAppQuit=true;
autoUpdater.setFeedURL({
  provider: "github",
  owner: "a06729",
  repo: "lms-react-app",
});


let mainWindow:BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
const createWindow = () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration:true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  mainWindow.webContents.openDevTools();
  // if(isDev){
  //   // Open the DevTools.
  //   mainWindow.webContents.openDevTools();
  // }
};

function handleSetTitle (event:any, title:any) {
  const webContents = event.sender
  const win = BrowserWindow.fromWebContents(webContents)
  console.log(`title:${title}`);
  win.setTitle(title)
}

async function videoDownload(url:string,fileName:string,filePath:string){
  
  const writer = createWriteStream(path.join(filePath,fileName));

  const response = await axios({
    url,
    method:"GET",
    responseType: 'stream',
    headers:{
      "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
        "Accept-Encoding":"identity;q=1, *;q=0",
        "Accept-Language":"ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7",
        "Sec-Fetch-Dest":"video",
        "Sec-Ch-Ua-Platform":"Windows",
        "Referer":"https://cmaker.donga.ac.kr/"
    },
    onDownloadProgress(progressEvent:AxiosProgressEvent) {
      const progress = Math.round((progressEvent.progress * 100));
      console.log(`다운로드 진행 중: ${progress}%`);
    },
  });
  console.log(response.status);
  response.data.pipe(writer);
  return new Promise((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
}

ipcMain.on('set-title', handleSetTitle)

ipcMain.on("ping",(event,mssage:string)=>{
  const webContents = event.sender
  const win = BrowserWindow.fromWebContents(webContents)
  console.log(`mssage:${mssage}`);
  win.webContents.send("pong", "main에서 보내는 메세지");
});

ipcMain.on('openDirectory', async(event:any,fileName:string,fileUrl:string)=>{
  fileName=fileName+'.mp4';
  
  console.log(fileName);
  console.log(fileUrl);
  
  if(fileUrl!=""){
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory']
    })
    console.log(`file경로:${result.filePaths[0]}`);
    videoDownload(fileUrl,fileName,result.filePaths[0])  
    .then(() => console.log('파일 다운로드 및 저장 완료'))
    .catch((error) => console.error('에러 발생:', error));
  }
});


autoUpdater.on('checking-for-update', () => {
  console.log('업데이트 확인 중...');
  mainWindow.webContents.send("checking-update","업데이트 확인 중...");
});
autoUpdater.on('update-available', (info) => {
  console.log('업데이트가 가능합니다.');
  mainWindow.webContents.send("update-available","업데이트가 가능합니다.");
  autoUpdater.downloadUpdate();
});
autoUpdater.on('update-not-available', (info) => {
  console.log('현재 최신버전입니다.');
  mainWindow.webContents.send("update-not-available","현재 최신버전입니다.");
});
autoUpdater.on('error', (err) => {
  console.log('에러가 발생하였습니다. 에러내용 : ' + err);
  mainWindow.webContents.send("update-error",err);
});
autoUpdater.on('download-progress', (progressObj) => {
  let log_message = "다운로드 속도: " + progressObj.bytesPerSecond;
  log_message = log_message + ' - 현재 ' + progressObj.percent + '%';
  log_message = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';
  console.log(log_message);
  mainWindow.webContents.send("update-download-progress",log_message);
})
autoUpdater.on('update-downloaded', (info) => {
  console.log('업데이트가 완료되었습니다.');
});



// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
// app.on('ready',async ()=>{
//   createWindow();
// });

app.whenReady().then(()=>{
  createWindow();
  app.on('activate', async () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
  if(!isDev){
    autoUpdater.checkForUpdates();
  }
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});


